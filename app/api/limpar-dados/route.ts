import { NextResponse } from "next/server"
import { supabaseAdmin } from "@/lib/supabase"

export async function POST(request: Request) {
  try {
    console.log("üóëÔ∏è Iniciando limpeza COMPLETA de dados...")

    // Verificar a conex√£o com o Supabase
    try {
      const { error: connectionError } = await supabaseAdmin.from("players").select("count")

      if (connectionError) {
        console.error("‚ùå Erro de conex√£o com o Supabase:", connectionError)
        return NextResponse.json(
          {
            error: "Erro de conex√£o com o Supabase: " + connectionError.message,
          },
          { status: 500 },
        )
      }
    } catch (connError) {
      console.error("üí• Exce√ß√£o ao conectar com o Supabase:", connError)
      return NextResponse.json(
        {
          error:
            "Exce√ß√£o ao conectar com o Supabase: " +
            (connError instanceof Error ? connError.message : String(connError)),
        },
        { status: 500 },
      )
    }

    // Contar dados antes da limpeza
    let recordsCountBefore = 0
    let playersCountBefore = 0

    try {
      const { data: recordsData } = await supabaseAdmin.from("records").select("id")
      recordsCountBefore = recordsData?.length || 0

      const { data: playersData } = await supabaseAdmin.from("players").select("id")
      playersCountBefore = playersData?.length || 0

      console.log(`üìä Dados antes da limpeza: ${recordsCountBefore} registros, ${playersCountBefore} jogadores`)
    } catch (countError) {
      console.warn("‚ö†Ô∏è Erro ao contar dados:", countError)
    }

    // 1. EXCLUIR TODOS OS REGISTROS (sem condi√ß√µes)
    console.log("üóëÔ∏è Excluindo TODOS os registros...")

    let recordsDeleted = 0
    try {
      // M√©todo 1: Tentar excluir todos os registros de uma vez
      const { data: deletedRecords, error: recordsError } = await supabaseAdmin
        .from("records")
        .delete()
        .neq("id", "00000000-0000-0000-0000-000000000000") // Condi√ß√£o que sempre ser√° verdadeira
        .select("id")

      if (recordsError) {
        console.warn("‚ö†Ô∏è M√©todo 1 falhou, tentando m√©todo 2...")

        // M√©todo 2: Buscar todos os IDs e excluir um por um
        const { data: allRecords } = await supabaseAdmin.from("records").select("id")

        if (allRecords && allRecords.length > 0) {
          for (const record of allRecords) {
            const { error: deleteError } = await supabaseAdmin.from("records").delete().eq("id", record.id)

            if (!deleteError) {
              recordsDeleted++
            }
          }
        }
      } else {
        recordsDeleted = deletedRecords?.length || 0
      }
    } catch (recordsDeleteError) {
      console.error("‚ùå Erro ao excluir registros:", recordsDeleteError)
    }

    // 2. EXCLUIR TODOS OS JOGADORES (sem condi√ß√µes)
    console.log("üóëÔ∏è Excluindo TODOS os jogadores...")

    let playersDeleted = 0
    try {
      // M√©todo 1: Tentar excluir todos os jogadores de uma vez
      const { data: deletedPlayers, error: playersError } = await supabaseAdmin
        .from("players")
        .delete()
        .neq("id", "00000000-0000-0000-0000-000000000000") // Condi√ß√£o que sempre ser√° verdadeira
        .select("id")

      if (playersError) {
        console.warn("‚ö†Ô∏è M√©todo 1 falhou, tentando m√©todo 2...")

        // M√©todo 2: Buscar todos os IDs e excluir um por um
        const { data: allPlayers } = await supabaseAdmin.from("players").select("id")

        if (allPlayers && allPlayers.length > 0) {
          for (const player of allPlayers) {
            const { error: deleteError } = await supabaseAdmin.from("players").delete().eq("id", player.id)

            if (!deleteError) {
              playersDeleted++
            }
          }
        }
      } else {
        playersDeleted = deletedPlayers?.length || 0
      }
    } catch (playersDeleteError) {
      console.error("‚ùå Erro ao excluir jogadores:", playersDeleteError)
    }

    // 3. Verificar se realmente foi tudo exclu√≠do
    console.log("üîç Verificando limpeza...")

    const { data: remainingRecords } = await supabaseAdmin.from("records").select("id")
    const { data: remainingPlayers } = await supabaseAdmin.from("players").select("id")

    const recordsRemaining = remainingRecords?.length || 0
    const playersRemaining = remainingPlayers?.length || 0

    console.log(`‚úÖ Limpeza conclu√≠da!`)
    console.log(`üìä Registros: ${recordsCountBefore} ‚Üí ${recordsRemaining} (${recordsDeleted} exclu√≠dos)`)
    console.log(`üë• Jogadores: ${playersCountBefore} ‚Üí ${playersRemaining} (${playersDeleted} exclu√≠dos)`)

    // 4. Se ainda restaram dados, tentar m√©todo mais agressivo
    if (recordsRemaining > 0 || playersRemaining > 0) {
      console.log("‚ö†Ô∏è Ainda restam dados, tentando limpeza mais agressiva...")

      try {
        // Usar SQL direto se poss√≠vel
        await supabaseAdmin.rpc("delete_all_data")
      } catch (sqlError) {
        console.warn("SQL direto n√£o dispon√≠vel:", sqlError)
      }
    }

    const isCompletelyClean = recordsRemaining === 0 && playersRemaining === 0

    return NextResponse.json({
      success: true,
      message: isCompletelyClean
        ? "üéâ Todos os dados foram limpos com sucesso! O banco est√° completamente vazio."
        : `‚ö†Ô∏è Limpeza parcial: ${recordsDeleted} registros e ${playersDeleted} jogadores foram exclu√≠dos.`,
      stats: {
        before: {
          records: recordsCountBefore,
          players: playersCountBefore,
        },
        deleted: {
          records: recordsDeleted,
          players: playersDeleted,
        },
        remaining: {
          records: recordsRemaining,
          players: playersRemaining,
        },
        completelyClean: isCompletelyClean,
      },
    })
  } catch (error) {
    console.error("üí• Erro durante a limpeza de dados:", error)
    return NextResponse.json(
      {
        error: "Erro interno do servidor: " + (error instanceof Error ? error.message : String(error)),
        stack: error instanceof Error ? error.stack : undefined,
      },
      { status: 500 },
    )
  }
}
